/* requirejs builder */
module.exports = function( grunt ){

	"use strict";
	
	var fs = require('fs'),
		requirejs = require('requirejs'),
		rdefineEnd = /\}\);[^}\w]*$/,
		config = {
			baseUrl: "src",
			paths:{
				jquery: "jquery"
			},
			name: "drawpad",
			out: "dist/drawpad.js",
			optimize: "none",
			findNestedDependencies: true,
			skipSemiColonInsertion: true,
			wrap: {
				startFile: "src/intro.js",
				endFile: "src/outro.js"
			},
			onBuildWrite: convert
		};
		
	/**
	 * This script is from jQuery builder task
	 * Strip all definitions generated by requirejs
	 * Convert "var" modules to var declarations
	 * "var module" means the module only contains a return
	 * statement that should be converted to a var declaration
	 * This is indicated by including the file in any "var" folder
	 * @param {String} name
	 * @param {String} path
	 * @param {String} contents The contents to be written (including their AMD wrappers)
	 */
	function convert( name, path, contents ) {
		var amdName;
		// Convert var modules
		if ( /.\/var\//.test( path ) ) {
			contents = contents
				.replace( /define\([\w\W]*?return/, "var " + (/var\/([\w-]+)/.exec(name)[1]) + " =" )
				.replace( rdefineEnd, "" );

		// Sizzle treatment
		} else if ( /^sizzle$/.test( name ) ) {
			contents = "var Sizzle =\n" + contents
				// Remove EXPOSE lines from Sizzle
				.replace( /\/\/\s*EXPOSE[\w\W]*\/\/\s*EXPOSE/, "return Sizzle;" );

		} else {

			// Ignore jQuery's exports (the only necessary one)
			if ( name !== "jquery" ) {
				contents = contents
					.replace( /\s*return\s+[^\}]+(\}\);[^\w\}]*)$/, "$1" )
					// Multiple exports
					.replace( /\s*exports\.\w+\s*=\s*\w+;/g, "" );
			}

			// Remove define wrappers, closure ends, and empty declarations
			contents = contents
				.replace( /define\([^{]*?{/, "" )
				.replace( rdefineEnd, "" );

			// Remove anything wrapped with
			// /* ExcludeStart */ /* ExcludeEnd */
			// or a single line directly after a // BuildExclude comment
			contents = contents
				.replace( /\/\*\s*ExcludeStart\s*\*\/[\w\W]*?\/\*\s*ExcludeEnd\s*\*\//ig, "" )
				.replace( /\/\/\s*BuildExclude\n\r?[\w\W]*?\n\r?/ig, "" );

			// Remove empty definitions
			contents = contents
				.replace( /define\(\[[^\]]+\]\)[\W\n]+$/, "" );
		}
		// AMD Name
		if ( (amdName = grunt.option( "amd" )) != null && /^exports\/amd$/.test( name ) ) {
			if (amdName) {
				grunt.log.writeln( "Naming jQuery with AMD name: " + amdName );
			} else {
				grunt.log.writeln( "AMD name now anonymous" );
			}
			// Remove the comma for anonymous defines
			contents = contents
				.replace( /(\s*)"jquery"(\,\s*)/, amdName ? "$1\"" + amdName + "\"$2" : "" );

		}
		return contents;
	}
	
	grunt.registerMultiTask(
		"build",
		"Concatenate source, and some edit ^w^",
		function(){
			var done = this.async(),
				version = grunt.config( "pkg.version" ),
				name = this.data.dest;
			
			if( process.env.COMMIT ){
				version += "_" + process.env.COMMIT
			}
			
			if( this.data.name ){
				config.name = this.data.name;
			}
			
			if( this.data.dest ){
				config.out = this.data.dest;
			}
			
			grunt.config.set( "pkg.version", version );
			
			config.out = function( complied ){
				complied = complied
					.replace( /@VERSION/g, version )
					.replace( /@DATE/g, ( new Date() ).toISOString().replace( /:\d+\.\d+Z$/, "Z" ) );

				grunt.file.write( name, complied );
			}
			
			requirejs.optimize( config, function( response ){
				grunt.verbose.writeln( response );
				grunt.log.ok( "File " + name + " created." );
				done();
			});
		}
	);
}